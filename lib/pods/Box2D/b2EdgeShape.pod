
=head1 NAME

Box2D::b2EdgeShape - A line segment (edge) shape

=head1 SYNOPSIS

 my $edge = Box2D::b2Edge->new();
 $edge->Set( $v1, $v2 );
 
 # give it ghost vertices
 $edge->m_vertex0( $v0 );
 $edge->m_hasVertex0( 1 );
 
 $edge->m_vertex3( $v3 );
 $edge->m_hasVertex3( 1 );

=head1 DESCRIPTION

A line segment (edge) shape. These can be connected in chains or loops
to other edge shapes. The connectivity information is used to ensure
correct contact normals. Supports ghost vertices to prevent internal collisions.
This class also inherits all the methods from L<Box2D::b2Shape>.

=head1 METHODS

=head2 new

 my $edge = Box2D::b2EdgeShape->new();

Returns the new edge shape.

=head2 Set

 $edge->Set( $v1, $v2 );

Sets the edge's vertices to the supplied L<Box2D::b2Vec2>s.

=head2 m_vertex1

 $edge->m_vertex1();
 $edge->m_vertex1( $v1 );

Returns a L<Box2D::b2Vec2> of the edge's first vertex.
Specify a vector to modify it.

=head2 m_vertex2

 $edge->m_vertex2();
 $edge->m_vertex2( $v2 );

Returns a L<Box2D::b2Vec2> of the edge's second vertex.
Specify a vector to modify it.

=head2 m_vertex0

 $edge->m_vertex0();
 $edge->m_vertex0( $v0 );

Returns a L<Box2D::b2Vec2> of the edge's ghost vertex 0.
Specify a vector to modify it.

=head2 m_vertex3

 $edge->m_vertex3();
 $edge->m_vertex3( $v3 );

Returns a L<Box2D::b2Vec2> of the edge's ghost vertex 3.
Specify a vector to modify it.

=head2 m_hasVertex0

 $edge->m_hasVertex0();
 $edge->m_hasVertex0( $has0 );

Returns the bool used to specify that the edge has a vertex 0.
Specify a true or false value to modify it.

=head2 m_hasVertex3

 $edge->m_hasVertex3();
 $edge->m_hasVertex3( $has3 );

Returns the bool used to specify that the edge has a vertex 3.
Specify a true or false value to modify it.

=head1 SEE ALSO

=over 4

=item * L<Box2D::b2Shape>

=item * L<Box2D::b2Vec2>

=back

=head1 BUGS

See L<Box2D/BUGS>

=head1 AUTHORS

See L<Box2D/AUTHORS>

=head1 COPYRIGHT & LICENSE

See L<Box2D/"COPYRIGHT & LICENSE">

=cut
