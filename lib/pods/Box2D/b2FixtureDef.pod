
=head1 NAME

Box2D::b2FixtureDef - TODO

=head1 SYNOPSIS

  # TODO

=head1 DESCRIPTION



=head1 METHODS

=head2 new()

The constructor sets the default fixture definition values.

=head2 density()

=head2 density( $density )

The density, usually in kg/m^2.

Parameters:

=over 4

=item * float32 $density (optional)

=back

Returns a float32

=head2 filter()

=head2 filter( $filter )

Contact filtering data.

Parameters:

=over 4

=item * Box2D::b2Filter $filter (optional)

=back

Returns a Box2D::b2Filter

=head2 friction()

=head2 friction( $friction )

The friction coefficient, usually in the range [0,1].

Parameters:

=over 4

=item * float32 $friction (optional)

=back

Returns a float32

=head2 isSensor()

=head2 isSensor( $isSensor )

A sensor shape collects contact information but never generates a collision response.

Parameters:

=over 4

=item * bool $isSensor (optional)

=back

Returns a bool

=head2 restitution()

=head2 restitution( $restitution )

The restitution (elasticity) usually in the range [0,1].

Parameters:

=over 4

=item * float32 $restitution (optional)

=back

Returns a float32

=head2 const b2Shape* b2FixtureDef::shape()

=head2 const b2Shape* b2FixtureDef::shape( $const b2Shape* b2FixtureDef::shape )

The shape, this must be set. The shape will be cloned, so you can create the shape on the stack.

Parameters:

=over 4

=item *  $const b2Shape* b2FixtureDef::shape (optional)

=back

=head2 void* b2FixtureDef::userData()

=head2 void* b2FixtureDef::userData( $void* b2FixtureDef::userData )

Use this to store application specific fixture data.

Parameters:

=over 4

=item *  $void* b2FixtureDef::userData (optional)

=back

=head1 BUGS

See L<Box2D/BUGS>

=head1 AUTHORS

See L<Box2D/AUTHORS>

=head1 COPYRIGHT & LICENSE

See L<Box2D/"COPYRIGHT & LICENSE">

=cut
