
=head1 NAME

Box2D::b2FixtureDef - TODO

=head1 SYNOPSIS

  # TODO

=head1 DESCRIPTION



=head1 METHODS

=head2 new()

The constructor sets the default fixture definition values.

=head2 density()

=head2 density( $density )

The density, usually in kg/m^2.

Parameters:

=over 4

=item * C<float32> C<$density> (optional)

=back

Returns a C<float32>

=head2 filter()

=head2 filter( $filter )

Contact filtering data.

Parameters:

=over 4

=item * C<Box2D::b2Filter> C<$filter> (optional)

=back

Returns a C<Box2D::b2Filter>

=head2 friction()

=head2 friction( $friction )

The friction coefficient, usually in the range [0,1].

Parameters:

=over 4

=item * C<float32> C<$friction> (optional)

=back

Returns a C<float32>

=head2 isSensor()

=head2 isSensor( $isSensor )

A sensor shape collects contact information but never generates a collision response.

Parameters:

=over 4

=item * C<bool> C<$isSensor> (optional)

=back

Returns a C<bool>

=head2 restitution()

=head2 restitution( $restitution )

The restitution (elasticity) usually in the range [0,1].

Parameters:

=over 4

=item * C<float32> C<$restitution> (optional)

=back

Returns a C<float32>

=head2 shape()

=head2 shape( $shape )

The shape, this must be set. The shape will be cloned, so you can create the shape on the stack.

Parameters:

=over 4

=item * C<Box2D::b2Shape*> C<$shape> (optional)

=back

Returns a C<Box2D::b2Shape*>

=head2 userData()

=head2 userData( $userData )

Use this to store application specific fixture data.

Parameters:

=over 4

=item * C<void*> C<$userData> (optional)

=back

Returns a C<void*>

=head1 SEE ALSO

=over 4

=item * L<Box2D>

=back

=head1 BUGS

See L<Box2D/BUGS>

=head1 AUTHORS

See L<Box2D/AUTHORS>

=head1 COPYRIGHT & LICENSE

See L<Box2D/"COPYRIGHT & LICENSE">

=cut
