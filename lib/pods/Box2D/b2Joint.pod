
=head1 NAME

Box2D::b2Joint - TODO

=head1 SYNOPSIS

  # TODO

=head1 DESCRIPTION



=head1 METHODS

=head2 new( $def )

Constructor

Parameters:

=over 4

=item * Box2D::b2JointDef $def

=back

=head2 virtual b2Joint::~b2Joint ()

=head2 Create( $def, $allocator )

Parameters:

=over 4

=item * Box2D::b2JointDef $def

=item * Box2D::b2BlockAllocator $allocator

=back

Returns a Box2D::b2Joint

=head2 Destroy( $joint, $allocator )

Parameters:

=over 4

=item * Box2D::b2Joint $joint

=item * Box2D::b2BlockAllocator $allocator

=back

=head2 virtual b2Vec2 b2Joint::GetAnchorA ()

Get the anchor point on bodyA in world coordinates. Implemented in b2DistanceJoint, b2FrictionJoint, b2GearJoint, b2LineJoint, b2MouseJoint, b2PrismaticJoint, b2PulleyJoint, b2RevoluteJoint, and b2WeldJoint.

=head2 virtual b2Vec2 b2Joint::GetAnchorB ()

Get the anchor point on bodyB in world coordinates. Implemented in b2DistanceJoint, b2FrictionJoint, b2GearJoint, b2LineJoint, b2MouseJoint, b2PrismaticJoint, b2PulleyJoint, b2RevoluteJoint, and b2WeldJoint.

=head2 GetBodyA()

Get the first body attached to this joint.

Returns a Box2D::b2Body

=head2 GetBodyB()

Get the second body attached to this joint.

Returns a Box2D::b2Body

=head2 GetNext()

Get the next joint the world joint list.

Returns a Box2D::b2Joint

=head2 virtual b2Vec2 b2Joint::GetReactionForce ( $inv_dt )

Get the reaction force on body2 at the joint anchor in Newtons. Implemented in b2DistanceJoint, b2FrictionJoint, b2GearJoint, b2LineJoint, b2MouseJoint, b2PrismaticJoint, b2PulleyJoint, b2RevoluteJoint, and b2WeldJoint.

Parameters:

=over 4

=item * float32 $inv_dt

=back

=head2 virtual float32 b2Joint::GetReactionTorque ( $inv_dt )

Get the reaction torque on body2 in N*m. Implemented in b2DistanceJoint, b2FrictionJoint, b2GearJoint, b2LineJoint, b2MouseJoint, b2PrismaticJoint, b2PulleyJoint, b2RevoluteJoint, and b2WeldJoint.

Parameters:

=over 4

=item * float32 $inv_dt

=back

=head2 GetType()

Get the type of the concrete joint.

Returns a Box2D::b2JointType

=head2 GetUserData()

Get the user data pointer.

=head2 virtual void b2Joint::InitVelocityConstraints ( $step )

Implemented in b2DistanceJoint, b2FrictionJoint, b2GearJoint, b2LineJoint, b2MouseJoint, b2PrismaticJoint, b2PulleyJoint, b2RevoluteJoint, and b2WeldJoint.

Parameters:

=over 4

=item * Box2D::b2TimeStep $step

=back

=head2 IsActive()

Short-cut function to determine if either body is inactive.

Returns a bool

=head2 SetUserData( $data )

Set the user data pointer.

Parameters:

=over 4

=item * void * $data

=back

=head2 virtual bool b2Joint::SolvePositionConstraints ( $baumgarte )

Implemented in b2DistanceJoint, b2FrictionJoint, b2GearJoint, b2LineJoint, b2MouseJoint, b2PrismaticJoint, b2PulleyJoint, b2RevoluteJoint, and b2WeldJoint.

Parameters:

=over 4

=item * float32 $baumgarte

=back

=head2 virtual void b2Joint::SolveVelocityConstraints ( $step )

Implemented in b2DistanceJoint, b2FrictionJoint, b2GearJoint, b2LineJoint, b2MouseJoint, b2PrismaticJoint, b2PulleyJoint, b2RevoluteJoint, and b2WeldJoint.

Parameters:

=over 4

=item * Box2D::b2TimeStep $step

=back

=head1 BUGS

Report bugs at https://github.com/PerlGameDev/Box2D-perl/issues

=head1 AUTHORS

See L<Box2D/AUTHORS>

=head1 COPYRIGHT & LICENSE

See L<Box2D/"COPYRIGHT & LICENSE">

=cut
