
=head1 NAME

Box2D::b2Mat22 - A 2-by-2 matrix. Stored in column-major order

=head1 SYNOPSIS

 my ( $a11, $a21 ) = (  4, 0 );
 my ( $a12, $a22 ) = ( -2, 3 );

 # Construct matrix with numbers
 my $matrix = Box2D::b2Mat22->new( $a11, $a12, $a21, $a22 );
 
 my $c1 = Box2D::b2Vec2->new( $a11, $a12 );
 my $c2 = Box2D::b2Vec2->new( $a21, $a22 );
 
 # Construct the equivalent matrix with columns
 my $matrix2 = Box2D::b2Mat22->new( $c1, $c2 );

=head1 DESCRIPTION

A class to store 2-by-2 matrices. It is made up of two columns, each being a L<Box2D::b2Vec2>,
stored in column-major order. The L</SYNOPSIS> shows how the matrix is arranged.
The class also provides some methods for matrix manipulation.
Also see L<Box2D::b2Math> for more.

=head1 METHODS

=head2 new

 my $mat = Box2D::b2Mat22->new( $c1, $c2 );
 my $mat = Box2D::b2Mat22->new( $a11, $a12, $a21, $a22 );

Returns the new matrix with the specified 4 values.
If 2 items are specified, C<$c1> and C<$c2> should be L<Box2D::b2Vec2>s representing column 1 and column 2 respectively.
If 4 items are specified, C<$a11>, C<$a12>, C<$a21> and C<$a22> should be numbers representing the corresponding cell.
The L</SYNOPSIS> shows this in more detail.

=head2 Set

 $mat->Set( $c1, $c2 );

Set the matrix's columns to the specified vectors. Works like the first form of L</new>.

=head2 ex

 my $c1 = $mat->ex;
 $mat->ex( $c1 );

Returns the first column vector of the matrix.
Specify a single vector to modify it.

=head2 ey

 my $c2 = $mat->ey;
 $mat->ey( $c2 );

Returns the second column vector of the matrix.
Specify a single vector to modify it.

=head2 SetIdentity

 $mat->SetIdentity();

Sets the matrix to the identity matrix, that is:

 [ 1 0
   0 1 ]

=head2 SetZero

 $mat->SetZero();

Sets the matrix's parameters all to zero.

=head2 GetInverse

 my $inverse = $mat->GetInverse();

Computes the inverse of the matrix, returning it in a new C<Box2D::Mat22>.
 
=head2 Solve

 my $x = $mat->Solve( $b );

Given a L<Box2D::b2Vec2> C<$b>, solves for vector C<$x> where C<Box2D::b2Mul($mat, $x) == $b>.
See L<Box2D::b2Math::b2Mul|Box2D::b2Math/b2Mul>. This is more efficient than computing the inverse in one-shot cases.

=head1 OVERLOADED OPERATORS

=head2 +

=head2 +=

Matrix addition of two matrices.

=head1 SEE ALSO

=over 4

=item * L<Box2D::b2Math>

=item * L<Box2D::b2Vec2>

=back

=head1 BUGS

See L<Box2D/BUGS>

=head1 AUTHORS

See L<Box2D/AUTHORS>

=head1 COPYRIGHT & LICENSE

See L<Box2D/"COPYRIGHT & LICENSE">

=cut
