
=head1 NAME

Box2D::b2Math - Vector, matrix and other math functions

=head1 SYNOPSIS

 my $a = Box2D::b2Vec2->new( 2, 0 );
 my $b = Box2D::b2Vec2->new( -4, 7 );

 my $dot_product = Box2D::b2Math::b2Dot( $a, $b );
 my cross_product = Box2D::b2Math::b2Cross( $a, $b );
 my $distance = Box2D::b2Math::b2Distance( $a, $b );

=head1 DESCRIPTION

Box2D includes a simple small vector and matrix module.
This has been designed to suit the internal needs of Box2D and the API.
All the members are exposed, so you may use them freely in your application.

=head1 METHODS

=head2 b2IsValid

 my $is_valid = Box2D::b2IsValid( $x );

Returns true if the number specified is finite and not a NaN. False otherwise.

=head2 b2InvSqrt

 my $inv_sqrt = Box2D::b2InvSqrt( $x );

Returns the inverse square-root of the provided number. It is an approximate yet fast function.

=head2 b2Sqrt

 my $sqrt = Box2D::b2Sqrt( $x );

Performs C<sqrt> on the provided number. You should use Perl's equivalent function instead of this.

=head2 b2Atan2

 my $atan2 = Box2D::b2Atan2( $y, $x );

Performs C<atan2> on the provided numbers. You should use Perl's equivalent function instead of this.

=head2 b2Vec2_zero

 my $zero = Box2D::b2Vec2_zero;

A useful constant holding the vector [0, 0].

=head2 b2Dot

 my $s = Box2D::b2Dot( $vec2_a, $vec2_b );
 my $s = Box2D::b2Dot( $vec3_a, $vec3_b );

Perform the dot product on two 2D or 3D vectors. Returns a scalar in both cases.

=head2 b2Cross

 my $s    = Box2D::b2Cross( $vec2_a, $vec2_b );
 my $vec2 = Box2D::b2Cross( $vec2_a, $s );
 my $vec2 = Box2D::b2Cross( $s, $vec2_a );
 my $vec3 = Box2D::b2Cross( $vec3_a, $vec3_b );

Performs the cross product with the arguments shown above. Returns the shown values.

=head2 b2Mul

 my $vec2       = Box2D::b2Mul( $mat22_A, $vec2_v );
 my $mat22      = Box2D::b2Mul( $mat22_A, $mat22_B );
 my $vec3       = Box2D::b2Mul( $mat33_A, $vec3_v );
 my $rot        = Box2D::b2Mul( $rot_q, $rot_r );
 my $vec2       = Box2D::b2Mul( $rot_q, $vec2_v );
 my $vec2       = Box2D::b2Mul( $transform_T, $vec2_v );
 my $transform  = Box2D::b2Mul( $transform_A, $transform_B );

Performs multiplication with the arguments shown above.
With a rotation and a vector, performs rotation on the vector.
Returns the shown values.

=head2 b2MulT

 my $vec2       = Box2D::b2MulT( $mat22_A, $vec2_v );
 my $mat22      = Box2D::b2MulT( $mat22_A, $mat22_B );
 my $rot        = Box2D::b2MulT( $rot_q, $rot_r );
 my $vec2       = Box2D::b2MulT( $rot_q, $vec2_v );
 my $vec2       = Box2D::b2MulT( $transform_T, $vec2_v );
 my $transform  = Box2D::b2MulT( $transform_A, $transform_B );

Performs transpose multiplication with the arguments shown above.
With a rotation and a vector, inverse rotates the vector.
Returns the shown values.

=head2 b2Mul22

 my $vec2 = Box2D::b2Mul22( $mat33_A, $vec2_v );

Performs multiplication of a matrix with a vector. Returns a vector.

=head2 b2Distance

 my $distance = Box2D::b2Distance( $a, $b );

Returns the distance between two vectors.

=head2 b2DistanceSquared

 my $distance_squared = Box2D::b2DistanceSquared( $a, $b );

Returns the square of the distance between two vectors.
For performance, use this instead of L</b2Distance> (if possible).

=head2 b2Abs

my $s     = Box2D::b2Abs( $a );
my $vec2  = Box2D::b2Abs( $vec2_a );
my $mat22 = Box2D::b2Abs( $mat22_a );

Gets the absolute value of a number, or of all parameters of a vector or matrix.
Returns the shown values.

=head2 b2Min

 my $s    = Box2D::b2Min( $a, $b );
 my $vec2 = Box2D::b2Min( $vec2_a, $vec2_b );

Returns the minimum of two numbers, or a new vector with both parameters being the minimum of what was passed in.

=head2 b2Max

 my $s    = Box2D::b2Max( $a, $b );
 my $vec2 = Box2D::b2Max( $vec2_a, $vec2_b );

Returns the maximum of two numbers, or a new vector with both parameters being the maximum of what was passed in.

=head2 b2Clamp

 my $s    = Box2D::b2Clamp( $a, $low, $high );
 my $vec2 = Box2D::b2Clamp( $vec2_a, $vec2_low, $vec2_high );

Returns the C<a> value passed in with none of its values lower than C<low> and none higher than C<high>.

=head2 b2NextPowerOfTwo

 my $next_power_of_two = Box2D::b2NextPowerOfTwo( $x );

Returns the smallest power of two greater than the supplied positive integer.

=head2 b2IsPowerOfTwo

 my $is_power_of_two = Box2D::b2IsPowerOfTwo( $x );

Returns true if the supplied positive integer is a power of two. False otherwise.

=head1 SEE ALSO

=over 4

=item * L<Box2D::b2Vec2>

=item * L<Box2D::b2Vec3>

=item * L<Box2D::b2Mat22>

=item * L<Box2D::b2Mat33>

=item * L<Box2D::b2Rot>

=item * L<Box2D::b2Transform>

=item * L<Box2D::b2Sweep>

=back

=head1 BUGS

See L<Box2D/BUGS>

=head1 AUTHORS

See L<Box2D/AUTHORS>

=head1 COPYRIGHT & LICENSE

See L<Box2D/"COPYRIGHT & LICENSE">

=cut
