
=head1 NAME

Box2D::b2World - TODO

=head1 SYNOPSIS

  # TODO

=head1 DESCRIPTION



=head1 METHODS

=head2 new( $gravity, $doSleep )

Constructor

Parameters:

=over 4

=item * Box2D::b2Vec2 $gravity

=item * bool $doSleep

=back

=head2 b2World::~b2World ()

Destruct the world. All physics entities are destroyed and all heap memory is released.

=head2 ClearForces()

Call this after you are done with time steps to clear the forces. You normally call this after each call to Step, unless you are performing sub-steps. By default, forces will be automatically cleared, so you don't need to call this function. See also:SetAutoClearForces

=head2 CreateBody( $def )

Create a rigid body given a definition. No reference to the definition is retained. Warning:This function is locked during callbacks.

Parameters:

=over 4

=item * Box2D::b2BodyDef $def

=back

Returns a Box2D::b2Body

=head2 CreateJoint( $def )

Create a joint to constrain bodies together. No reference to the definition is retained. This may cause the connected bodies to cease colliding. Warning:This function is locked during callbacks.

Parameters:

=over 4

=item * Box2D::b2JointDef $def

=back

Returns a Box2D::b2Joint

=head2 DestroyBody( $body )

Destroy a rigid body given a definition. No reference to the definition is retained. This function is locked during callbacks. Warning:This automatically deletes all associated shapes and joints.  This function is locked during callbacks.

Parameters:

=over 4

=item * Box2D::b2Body $body

=back

=head2 DestroyJoint( $joint )

Destroy a joint. This may cause the connected bodies to begin colliding. Warning:This function is locked during callbacks.

Parameters:

=over 4

=item * Box2D::b2Joint $joint

=back

=head2 DrawDebugData()

Call this to draw shapes and other debug draw data.

=head2 GetAutoClearForces()

Get the flag that controls automatic clearing of forces after each time step.

Returns a bool

=head2 GetBodyCount()

Get the number of bodies.

Returns a int32

=head2 GetBodyList()

Get the world body list. With the returned body, use b2Body::GetNext to get the next body in the world list. A NULL body indicates the end of the list.

Returns a Box2D::b2Body - the head of the world body list.

=head2 GetContactCount()

Get the number of contacts (each may have 0 or more contact points).

Returns a int32

=head2 GetContactList()

Get the world contact list. With the returned contact, use b2Contact::GetNext to get the next contact in the world list. A NULL contact indicates the end of the list.

Returns a Box2D::b2Contact - the head of the world contact list. Warning:contacts are

=head2 GetGravity()

Get the global gravity vector.

Returns a Box2D::b2Vec2

=head2 GetJointCount()

Get the number of joints.

Returns a int32

=head2 GetJointList()

Get the world joint list. With the returned joint, use b2Joint::GetNext to get the next joint in the world list. A NULL joint indicates the end of the list.

Returns a Box2D::b2Joint - the head of the world joint list.

=head2 GetProxyCount()

Get the number of broad-phase proxies.

Returns a int32

=head2 IsLocked()

Is the world locked (in the middle of a time step).

Returns a bool

=head2 QueryAABB( $callback, $aabb )

Query the world for all fixtures that potentially overlap the provided AABB.

Parameters:

=over 4

=item * Box2D::b2QueryCallback $callback - a user implemented callback class.

=item * Box2D::b2AABB $aabb - the query box.

=back

=head2 RayCast( $callback, $point1, $point2 )

Ray-cast the world for all fixtures in the path of the ray. Your callback controls whether you get the closest point, any point, or n-points. The ray-cast ignores shapes that contain the starting point.

Parameters:

=over 4

=item * Box2D::b2RayCastCallback $callback - a user implemented callback class.

=item * Box2D::b2Vec2 $point1 - the ray starting point

=item * Box2D::b2Vec2 $point2 - the ray ending point

=back

=head2 SetAutoClearForces( $flag )

Set flag to control automatic clearing of forces after each time step.

Parameters:

=over 4

=item * bool $flag

=back

=head2 SetContactFilter( $filter )

Register a contact filter to provide specific control over collision. Otherwise the default filter is used (b2_defaultFilter). The listener is owned by you and must remain in scope.

Parameters:

=over 4

=item * Box2D::b2ContactFilter $filter

=back

=head2 SetContactListener( $listener )

Register a contact event listener. The listener is owned by you and must remain in scope.

Parameters:

=over 4

=item * Box2D::b2ContactListener $listener

=back

=head2 SetContinuousPhysics( $flag )

Enable/disable continuous physics. For testing.

Parameters:

=over 4

=item * bool $flag

=back

=head2 SetDebugDraw( $debugDraw )

Register a routine for debug drawing. The debug draw functions are called inside with b2World::DrawDebugData method. The debug draw object is owned by you and must remain in scope.

Parameters:

=over 4

=item * Box2D::b2DebugDraw $debugDraw

=back

=head2 SetDestructionListener( $listener )

Register a destruction listener. The listener is owned by you and must remain in scope.

Parameters:

=over 4

=item * Box2D::b2DestructionListener $listener

=back

=head2 SetGravity( $gravity )

Change the global gravity vector.

Parameters:

=over 4

=item * Box2D::b2Vec2 $gravity

=back

=head2 SetWarmStarting( $flag )

Enable/disable warm starting. For testing.

Parameters:

=over 4

=item * bool $flag

=back

=head2 Step( $timeStep, $velocityIterations, $positionIterations )

Take a time step. This performs collision detection, integration, and constraint solution.

Parameters:

=over 4

=item * float32 $timeStep - the amount of time to simulate, this should not vary.

=item * int32 $velocityIterations - for the velocity constraint solver.

=item * int32 $positionIterations - for the position constraint solver.

=back

=head1 BUGS

Report bugs at https://github.com/PerlGameDev/Box2D-perl/issues

=head1 AUTHORS

See L<Box2D/AUTHORS>

=head1 COPYRIGHT & LICENSE

See L<Box2D/"COPYRIGHT & LICENSE">

=cut
