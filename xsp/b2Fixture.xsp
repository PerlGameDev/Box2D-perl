%{

#include <Box2D/Box2D.h>
#include <helper.h>

%}

%module{Box2D};

%name{Box2D::b2Fixture} class b2Fixture
{

void SetSensor( bool sensor );

bool IsSensor();

void Refilter();

void SetDensity( float32 density );

float32 GetDensity();

float32 GetFriction();

void SetFriction( float32 friction );

float32 GetRestitution();

void SetRestitution( float32 restitution );

void Dump( int32 bodyIndex );

%{

unsigned int
b2Fixture::GetType()
	CODE:
		RETVAL = (unsigned int) THIS->GetType();
	OUTPUT:
		RETVAL

void*
b2Fixture::GetShape()
	PREINIT:
		const char* CLASS;
	CODE:
		b2Shape::Type type = THIS->GetType();
		if( type == b2Shape::e_circle )
			CLASS = "Box2D::b2CircleShape";
		else if( type == b2Shape::e_edge )
			CLASS = "Box2D::b2EdgeShape";
		else if( type == b2Shape::e_polygon )
			CLASS = "Box2D::b2PolygonShape";
		else if( type == b2Shape::e_chain )
			CLASS = "Box2D::b2ChainShape";
		else
			croak( "b2Fixture shape has invalid Type: %d", (int) type );
		RETVAL = THIS->GetShape();
	OUTPUT:
		RETVAL

void
b2Fixture::SetFilterData( filter )
	b2Filter* filter
	CODE:
		THIS->SetFilterData( *filter );

void*
b2Fixture::GetFilterData()
	PREINIT:
		const char* CLASS = "Box2D::b2Filter";
	CODE:
		RETVAL = (b2Filter*) &(THIS->GetFilterData());
	OUTPUT:
		RETVAL

void*
b2Fixture::GetBody()
	PREINIT:
		const char* CLASS = "Box2D::b2Body";
	CODE:
		RETVAL = THIS->GetBody();
	OUTPUT:
		RETVAL

void*
b2Fixture::GetNext()
	PREINIT:
		const char* CLASS = "Box2D::b2Fixture";
	CODE:
		RETVAL = THIS->GetNext();
	OUTPUT:
		RETVAL

void
b2Fixture::GetUserData()
	PPCODE:
		void* data = THIS->GetUserData();
		if ( data == NULL )
			XSRETURN_UNDEF;
		ST(0) = (SV*) data;
		XSRETURN(1);

void
b2Fixture::SetUserData( data )
	SV* data
	CODE:
		THIS->SetUserData( (void*) newSVsv( data ) );

bool
b2Fixture::TestPoint( p )
	b2Vec2* p
	CODE:
		RETVAL = THIS->TestPoint( *p );
	OUTPUT:
		RETVAL

bool
b2Fixture::RayCast( output, input, childIndex )
	b2RayCastOutput* output
	b2RayCastInput* input
	int32 childIndex
	CODE:
		RETVAL = THIS->RayCast( output, *input, childIndex );
	OUTPUT:
		RETVAL

void
b2Fixture::GetMassData( massData )
	b2MassData* massData
	CODE:
		THIS->GetMassData( massData );

void*
b2Fixture::GetAABB( childIndex )
	int32 childIndex
	PREINIT:
		const char* CLASS = "Box2D::b2AABB";
	CODE:
		RETVAL = (b2AABB*) &(THIS->GetAABB( childIndex ));
	OUTPUT:
		RETVAL

%}

};
