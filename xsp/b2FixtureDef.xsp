%{

#include <Box2D/Box2D.h>
#include <helper.h>

%}

%module{Box2D};

%name{Box2D::b2FixtureDef} class b2FixtureDef
{

b2FixtureDef();

%{

void*
b2FixtureDef::shape( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Shape";
	CODE:
		if( items > 1 )
		{
			THIS->shape = (b2Shape*) stack_to_object( ST(1) );
		}
		RETVAL = (void*) THIS->shape;
	OUTPUT:
		RETVAL

void
b2FixtureDef::userData( ... )
	PPCODE:
		if ( items > 1 )
			THIS->userData = (void *) newSVsv( ST(1) );
		if ( THIS->userData == NULL )
			XSRETURN_UNDEF;
		ST(0) = (SV*) THIS->userData;
		XSRETURN(1);

float32
b2FixtureDef::density( ... )
	CODE:
		if( items > 1 )
		{
			THIS->density = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->density;
	OUTPUT:
		RETVAL

float32
b2FixtureDef::friction( ... )
	CODE:
		if( items > 1 )
		{
			THIS->friction = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->friction;
	OUTPUT:
		RETVAL

float32
b2FixtureDef::restitution( ... )
	CODE:
		if( items > 1 )
		{
			THIS->restitution = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->restitution;
	OUTPUT:
		RETVAL

void*
b2FixtureDef::filter( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Filter";
	CODE:
		if ( items > 1 )
		{
			THIS->filter = *(b2Filter *)stack_to_object( ST(1) );
		}
		RETVAL = &(THIS->filter);
	OUTPUT:
		RETVAL

bool
b2FixtureDef::isSensor( ... )
	CODE:
		if( items > 1 )
		{
			THIS->isSensor = (bool)SvTRUE( ST(1) );
		}
		RETVAL = THIS->isSensor;
	OUTPUT:
		RETVAL

%}

};
