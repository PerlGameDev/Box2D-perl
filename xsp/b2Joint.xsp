%{

#include <Box2D/Box2D.h>
#include <helper.h>

%}

%module{Box2D};

%name{Box2D::b2Joint} class b2Joint
{

float32 GetReactionTorque(float32 inv_dt);

bool IsActive();

bool GetCollideConnected();

%{

BOOT:
{
	HV* stash = gv_stashpv( "Box2D", TRUE );

	/* enum b2JointType */
	constsub_exporting( stash, "e_unknownJoint",   newSViv((IV) e_unknownJoint  ), "joint" );
	constsub_exporting( stash, "e_revoluteJoint",  newSViv((IV) e_revoluteJoint ), "joint" );
	constsub_exporting( stash, "e_prismaticJoint", newSViv((IV) e_prismaticJoint), "joint" );
	constsub_exporting( stash, "e_distanceJoint",  newSViv((IV) e_distanceJoint ), "joint" );
	constsub_exporting( stash, "e_pulleyJoint",    newSViv((IV) e_pulleyJoint   ), "joint" );
	constsub_exporting( stash, "e_mouseJoint",     newSViv((IV) e_mouseJoint    ), "joint" );
	constsub_exporting( stash, "e_gearJoint",      newSViv((IV) e_gearJoint     ), "joint" );
	constsub_exporting( stash, "e_wheelJoint",     newSViv((IV) e_wheelJoint    ), "joint" );
	constsub_exporting( stash, "e_weldJoint",      newSViv((IV) e_weldJoint     ), "joint" );
	constsub_exporting( stash, "e_frictionJoint",  newSViv((IV) e_frictionJoint ), "joint" );
	constsub_exporting( stash, "e_ropeJoint",      newSViv((IV) e_ropeJoint     ), "joint" );

	/* enum b2LimitState */
	constsub_exporting( stash, "e_inactiveLimit", newSViv((IV) e_inactiveLimit), "joint" );
	constsub_exporting( stash, "e_atLowerLimit",  newSViv((IV) e_atLowerLimit ), "joint" );
	constsub_exporting( stash, "e_atUpperLimit",  newSViv((IV) e_atUpperLimit ), "joint" );
	constsub_exporting( stash, "e_equalLimits",   newSViv((IV) e_equalLimits  ), "joint" );
}

int
b2Joint::GetType()
	CODE:
		RETVAL = (int)THIS->GetType();
	OUTPUT:
		RETVAL

void*
b2Joint::GetBodyA()
	PREINIT:
		const char* CLASS = "Box2D::b2Body";
	CODE:
		RETVAL = THIS->GetBodyA();
	OUTPUT:
		RETVAL

void*
b2Joint::GetBodyB()
	PREINIT:
		const char* CLASS = "Box2D::b2Body";
	CODE:
		RETVAL = THIS->GetBodyB();
	OUTPUT:
		RETVAL


void*
b2Joint::GetAnchorA()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->GetAnchorA());
	OUTPUT:
		RETVAL

void*
b2Joint::GetAnchorB()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->GetAnchorB());
	OUTPUT:
		RETVAL

void*
b2Joint::GetReactionForce(inv_dt)
	float32 inv_dt
	PREINIT:
			const char* CLASS = "Box2D::b2Vec2";
	CODE:
			RETVAL = new b2Vec2(THIS->GetReactionForce(inv_dt));
	OUTPUT:
			RETVAL

void
b2Joint::GetUserData()
	PPCODE:
		void* data = THIS->GetUserData();
		if ( data == NULL )
			XSRETURN_UNDEF;
		ST(0) = (SV*) data;
		XSRETURN(1);

void
b2Joint::SetUserData( data )
	SV* data
	CODE:
		THIS->SetUserData( (void*) newSVsv( data ) );

%}

};

