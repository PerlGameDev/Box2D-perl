%{

#include <Box2D/Box2D.h>
#include <helper.h>

%}

%module{Box2D};

%name{Box2D::b2Joint} class b2Joint
{

float32 GetReactionTorque(float32 inv_dt);

bool IsActive();

bool GetCollideConnected();

%{

BOOT:
{
	HV* stash = gv_stashpv( "Box2D", TRUE );

	/* enum b2JointType */
	constsub_exporting( stash, "e_unknownJoint",   newSVuv((UV) e_unknownJoint  ), "joint" );
	constsub_exporting( stash, "e_revoluteJoint",  newSVuv((UV) e_revoluteJoint ), "joint" );
	constsub_exporting( stash, "e_prismaticJoint", newSVuv((UV) e_prismaticJoint), "joint" );
	constsub_exporting( stash, "e_distanceJoint",  newSVuv((UV) e_distanceJoint ), "joint" );
	constsub_exporting( stash, "e_pulleyJoint",    newSVuv((UV) e_pulleyJoint   ), "joint" );
	constsub_exporting( stash, "e_mouseJoint",     newSVuv((UV) e_mouseJoint    ), "joint" );
	constsub_exporting( stash, "e_gearJoint",      newSVuv((UV) e_gearJoint     ), "joint" );
	constsub_exporting( stash, "e_wheelJoint",     newSVuv((UV) e_wheelJoint    ), "joint" );
	constsub_exporting( stash, "e_weldJoint",      newSVuv((UV) e_weldJoint     ), "joint" );
	constsub_exporting( stash, "e_frictionJoint",  newSVuv((UV) e_frictionJoint ), "joint" );
	constsub_exporting( stash, "e_ropeJoint",      newSVuv((UV) e_ropeJoint     ), "joint" );

	/* enum b2LimitState */
	constsub_exporting( stash, "e_inactiveLimit", newSVuv((UV) e_inactiveLimit), "joint" );
	constsub_exporting( stash, "e_atLowerLimit",  newSVuv((UV) e_atLowerLimit ), "joint" );
	constsub_exporting( stash, "e_atUpperLimit",  newSVuv((UV) e_atUpperLimit ), "joint" );
	constsub_exporting( stash, "e_equalLimits",   newSVuv((UV) e_equalLimits  ), "joint" );
}

int
b2Joint::GetType()
	CODE:
		RETVAL = (int)THIS->GetType();
	OUTPUT:
		RETVAL

void*
b2Joint::GetBodyA()
	PREINIT:
		const char* CLASS = "Box2D::b2Body";
	CODE:
		RETVAL = THIS->GetBodyA();
	OUTPUT:
		RETVAL

void*
b2Joint::GetBodyB()
	PREINIT:
		const char* CLASS = "Box2D::b2Body";
	CODE:
		RETVAL = THIS->GetBodyB();
	OUTPUT:
		RETVAL


void*
b2Joint::GetAnchorA()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->GetAnchorA());
	OUTPUT:
		RETVAL

void*
b2Joint::GetAnchorB()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->GetAnchorB());
	OUTPUT:
		RETVAL

void*
b2Joint::GetReactionForce(inv_dt)
	float32 inv_dt
	PREINIT:
			const char* CLASS = "Box2D::b2Vec2";
	CODE:
			RETVAL = new b2Vec2(THIS->GetReactionForce(inv_dt));
	OUTPUT:
			RETVAL

SV*
b2Joint::GetUserData()
	PPCODE:
		void* userData = THIS->GetUserData();
		if ( !userData )
			XSRETURN_UNDEF;
		ST(0) = (SV *)userData;
		XSRETURN(1);

void
b2Joint::SetUserData( ... )
	PPCODE:
		if ( items > 1 )
			THIS->SetUserData( (void *)SvREFCNT_inc( ST(1) ) );

%}

};

