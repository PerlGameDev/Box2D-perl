%{

#include <Box2D/Box2D.h>
#include <helper.h>

%}

%module{Box2D};

%name{Box2D::b2Joint} class b2Joint
{

float32 GetReactionTorque(float32 inv_dt);

bool IsActive();

bool GetCollideConnected();

%{

int
b2Joint::GetType()
	CODE:
		RETVAL = (int)THIS->GetType();
	OUTPUT:
		RETVAL

void*
b2Joint::GetBodyA()
	PREINIT:
		const char* CLASS = "Box2D::b2Body";
	CODE:
		RETVAL = THIS->GetBodyA();
	OUTPUT:
		RETVAL

void*
b2Joint::GetBodyB()
	PREINIT:
		const char* CLASS = "Box2D::b2Body";
	CODE:
		RETVAL = THIS->GetBodyB();
	OUTPUT:
		RETVAL


void*
b2Joint::GetAnchorA()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->GetAnchorA());
	OUTPUT:
		RETVAL

void*
b2Joint::GetAnchorB()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->GetAnchorB());
	OUTPUT:
		RETVAL

void*
b2Joint::GetReactionForce(inv_dt)
	float32 inv_dt
	PREINIT:
			const char* CLASS = "Box2D::b2Vec2";
	CODE:
			RETVAL = new b2Vec2(THIS->GetReactionForce(inv_dt));
	OUTPUT:
			RETVAL

SV*
b2Joint::GetUserData( )
	PPCODE:
		void* userData = THIS->GetUserData();
		if (!userData)
			XSRETURN_EMPTY;
		ST(0) = (SV *)userData;
		XSRETURN(1);

void
b2Joint::SetUserData( ... )
	PPCODE:
		if ( items > 1)
			THIS->SetUserData( (void *)new_data( ST(1) ) );

%}

};

