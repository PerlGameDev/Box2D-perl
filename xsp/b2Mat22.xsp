%{

#include <Box2D/Box2D.h>
#include <helper.h>

%}

%module{Box2D};

%name{Box2D::b2Mat22} class b2Mat22
{

void SetIdentity();

void SetZero();

%{

b2Mat22*
b2Mat22::new( ... )
	CODE:
		if(items == 3) {
			RETVAL = new b2Mat22( *(b2Vec2 *)stack_to_object(ST(1)), *(b2Vec2 *)stack_to_object(ST(2)) );
		}
		else if(items == 5) {
			RETVAL = new b2Mat22( (float32)SvNV(ST(1)), (float32)SvNV(ST(2)), (float32)SvNV(ST(3)), (float32)SvNV(ST(4)) );
		}
		else {
			croak_xs_usage(cv,  "THIS, (c1, c2)||(a11, a12, a21, a22)");
		}
	OUTPUT:
		RETVAL

void
b2Mat22::Set( c1, c2 )
	b2Vec2* c1
	b2Vec2* c2
	CODE:
		THIS->Set( *c1, *c2 );

b2Mat22*
b2Mat22::GetInverse()
	PREINIT:
		const char* CLASS = "Box2D::b2Mat22";
	CODE:
		RETVAL = new b2Mat22(THIS->GetInverse());
	OUTPUT:
		RETVAL

b2Vec2*
b2Mat22::Solve( b )
	b2Vec2* b
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->Solve(*b));
	OUTPUT:
		RETVAL

b2Vec2*
b2Mat22::ex( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if( items > 1 )
		{
			THIS->ex = *(b2Vec2 *)stack_to_object(ST(1));
		}
		RETVAL = &(THIS->ex);
	OUTPUT:
		RETVAL

b2Vec2*
b2Mat22::ey( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if( items > 1 )
		{
			THIS->ey = *(b2Vec2 *)stack_to_object(ST(1));
		}
		RETVAL = &(THIS->ey);
	OUTPUT:
		RETVAL

%}

};
