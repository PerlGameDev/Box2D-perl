%module{Box2D};

%name{Box2D::b2PolygonShape} class b2PolygonShape : public %name{Box2D::b2Shape} b2Shape
{

b2PolygonShape();

int32 GetVertexCount();

%{

void
b2PolygonShape::Set( ... )
	CODE:
		b2Vec2 vertices[b2_maxPolygonVertices];
		int i;
		int count = items - 1;
		if( count > b2_maxPolygonVertices )
			count = b2_maxPolygonVertices;
		for(i = 0; i < count; i++)
			vertices[i] = *(b2Vec2*)stack_to_object( ST(i + 1) );
		THIS->Set( vertices, count );

void
b2PolygonShape::SetAsBox( x, y, ... )
	float32 x
	float32 y
	CODE:
		if ( items == 3 )
			THIS->SetAsBox( x, y );
		else if ( items == 5 )
			THIS->SetAsBox( x, y, *(b2Vec2*)stack_to_object( ST(3) ), (float32)SvNV( ST(4) ) );
		else
			croak_xs_usage( cv, "THIS, x, y, ()||(center, angle)" );

void*
b2PolygonShape::GetVertex( index )
	int index
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->GetVertex(index));
	OUTPUT:
		RETVAL

void*
b2PolygonShape::m_centroid( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if( items > 1 )
		{
			THIS->m_centroid = *(b2Vec2 *)stack_to_object(ST(1));
		}
		RETVAL = &(THIS->m_centroid);
	OUTPUT:
		RETVAL
		
void*
b2PolygonShape::m_vertices( index, ... )
	int index;
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if( items > 2 )
		{
			THIS->m_vertices[index] = *(b2Vec2 *)stack_to_object(ST(2));
		}
		RETVAL = &(THIS->m_vertices[index]);
	OUTPUT:
		RETVAL
		
void*
b2PolygonShape::m_normals( index, ... )
	int index;
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if( items > 2 )
		{
			THIS->m_normals[index] = *(b2Vec2 *)stack_to_object(ST(2));
		}
		RETVAL = &(THIS->m_normals[index]);
	OUTPUT:
		RETVAL
		
int32
b2PolygonShape::m_vertexCount( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->m_vertexCount = (int32)SvIV( ST(1) );
		}
		RETVAL = THIS->m_vertexCount;
	OUTPUT:
		RETVAL
		
%}

};

