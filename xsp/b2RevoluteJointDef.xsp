%{

#include <Box2D/Box2D.h>

%}

%module{Box2D};

%name{Box2D::b2RevoluteJointDef} class b2RevoluteJointDef :public %name{Box2D::b2JointDef} b2JointDef
{

b2RevoluteJointDef();

%{

void
b2RevoluteJointDef::Initialize( bodyA, bodyB, anchor )
	b2Body* bodyA
	b2Body* bodyB
	b2Vec2* anchor
	CODE:
		THIS->Initialize( bodyA, bodyB, *anchor );

b2Vec2*
b2RevoluteJointDef::localAnchorA( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if ( items > 1 )
		{
			THIS->localAnchorA = *(b2Vec2*)SvUV( ST(1) );
		}
		RETVAL = &(THIS->localAnchorA);
	OUTPUT:
		RETVAL

b2Vec2*
b2RevoluteJointDef::localAnchorB( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if ( items > 1 )
		{
			THIS->localAnchorB = *(b2Vec2*)SvUV( ST(1) );
		}
		RETVAL = &(THIS->localAnchorB);
	OUTPUT:
		RETVAL

float32
b2RevoluteJointDef::referenceAngle( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->referenceAngle = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->referenceAngle;
	OUTPUT:
		RETVAL

bool
b2RevoluteJointDef::enableLimit( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->enableLimit = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->enableLimit;
	OUTPUT:
		RETVAL

float32
b2RevoluteJointDef::upperAngle( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->upperAngle = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->upperAngle;
	OUTPUT:
		RETVAL

float32
b2RevoluteJointDef::lowerAngle( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->lowerAngle = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->lowerAngle;
	OUTPUT:
		RETVAL

bool
b2RevoluteJointDef::enableMotor( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->enableMotor = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->enableMotor;
	OUTPUT:
		RETVAL

float32
b2RevoluteJointDef::motorSpeed( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->motorSpeed = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->motorSpeed;
	OUTPUT:
		RETVAL

float32
b2RevoluteJointDef::maxMotorTorque( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->maxMotorTorque = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->maxMotorTorque;
	OUTPUT:
		RETVAL

%}

};

