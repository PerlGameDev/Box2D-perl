%{

#include <Box2D/Box2D.h>

%}

%module{Box2D};

%name{Box2D::b2Vec2} class b2Vec2
{

void SetZero();

void Set( float32 x_, float32 y_ );

float32 Length();

float32 LengthSquared();

float32 Normalize();

bool IsValid();

%{

b2Vec2*
b2Vec2::new( ... )
	CODE:
		if(items == 3)
			RETVAL = new b2Vec2( (float32)SvNV(ST(1)), (float32)SvNV(ST(2)) );
		else if(items == 1)
			RETVAL = new b2Vec2;
		else
			croak_xs_usage(cv, "THIS, ()||(x, y)");
	OUTPUT:
		RETVAL

float32
b2Vec2::x( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->x = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->x;
	OUTPUT:
		RETVAL

float32
b2Vec2::y( ... )
	CODE:
		if ( items > 1 )
		{
			THIS->y = (float32)SvNV( ST(1) );
		}
		RETVAL = THIS->y;
	OUTPUT:
		RETVAL

b2Vec2*
b2Vec2::_negate()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(-*THIS);
	OUTPUT:
		RETVAL

b2Vec2*
b2Vec2::Skew()
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		RETVAL = new b2Vec2(THIS->Skew());
	OUTPUT:
		RETVAL

%}

/* +=, -= and *= would be here,
but it's better to let Perl autogenerate them */

};

